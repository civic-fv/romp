<grammar xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">

  <!-- RelaxNG schema for the output produced by murphi2xml -->

  <start>
    <ref name="unit"/>
  </start>

  <define name="add">
    <element name="add">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="aliasdecl">
    <element name="aliasdecl">
      <ref name="location"/>
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <ref name="content"/>
      <element name="value">
        <ref name="expr"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="aliasrule">
    <element name="aliasrule">
      <ref name="location"/>
      <optional>
        <attribute name="name">
          <text/>
        </attribute>
      </optional>
      <ref name="content"/>
      <optional>
        <element name="aliases">
          <zeroOrMore>
            <choice>
              <ref name="aliasdecl"/>
              <ref name="content"/>
            </choice>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="rules"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="aliasstmt">
    <element name="aliasstmt">
      <ref name="location"/>
      <ref name="content"/>
      <optional>
        <element name="aliases">
          <zeroOrMore>
            <choice>
              <ref name="aliasdecl"/>
              <ref name="content"/>
            </choice>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="body"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="and">
    <element name="and">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="array">
    <element name="array">
      <ref name="location"/>
      <ref name="content"/>
      <element name="indextype">
        <ref name="typeexpr"/>
      </element>
      <ref name="content"/>
      <element name="elementtype">
        <ref name="typeexpr"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="assignment">
    <element name="assignment">
      <ref name="location"/>
      <element name="lhs">
        <ref name="expr"/>
      </element>
      <ref name="content"/>
      <element name="rhs">
        <ref name="expr"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="band">
    <element name="band">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="bnot">
    <element name="bnot">
      <ref name="location"/>
      <ref name="uexpr"/>
    </element>
  </define>

  <define name="bor">
    <element name="bor">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="binexpr">
    <ref name="content"/>
    <element name="lhs">
      <ref name="content"/>
      <ref name="expr"/>
      <ref name="content"/>
    </element>
    <ref name="content"/>
    <element name="rhs">
      <ref name="content"/>
      <ref name="expr"/>
      <ref name="content"/>
    </element>
    <ref name="content"/>
  </define>

  <define name="body">
    <element name="body">
      <zeroOrMore>
        <choice>
          <ref name="content"/>
          <ref name="statement"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>

  <define name="clear">
    <element name="clear">
      <ref name="location"/>
      <ref name="content"/>
      <ref name="expr"/>
      <ref name="content"/>
    </element>
  </define>

  <define name="constdecl">
    <element name="constdecl">
      <ref name="location"/>
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <ref name="content"/>
      <element name="value">
        <ref name="expr"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="content">
    <optional>
      <text/>
    </optional>
  </define>

  <define name="decls">
    <element name="decls">
      <ref name="location"/>
      <zeroOrMore>
        <choice>
          <ref name="aliasdecl"/>
          <ref name="constdecl"/>
          <ref name="typedecl"/>
          <ref name="vardecl"/>
          <ref name="content"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>

  <define name="div">
    <element name="div">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="element">
    <element name="element">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="enum">
    <element name="enum">
      <ref name="location"/>
      <zeroOrMore>
        <choice>
          <ref name="content"/>
          <element name="member">
            <ref name="location"/>
            <attribute name="name">
              <ref name="identifier"/>
            </attribute>
            <ref name="content"/>
          </element>
        </choice>
      </zeroOrMore>
    </element>
  </define>

  <define name="eq">
    <element name="eq">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="errorstmt">
    <element name="errorstmt">
      <ref name="location"/>
      <attribute name="message">
        <text/>
      </attribute>
      <ref name="content"/>
    </element>
  </define>

  <define name="exists">
    <element name="exists">
      <ref name="location"/>
      <ref name="content"/>
      <element name="quan">
        <ref name="content"/>
        <ref name="quantifier"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
      <element name="expr">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="expr">
    <choice>
      <ref name="add"/>
      <ref name="and"/>
      <ref name="band"/>
      <ref name="bnot"/>
      <ref name="bor"/>
      <ref name="div"/>
      <ref name="element"/>
      <ref name="eq"/>
      <ref name="exists"/>
      <ref name="exprid"/>
      <ref name="field"/>
      <ref name="forall"/>
      <ref name="functioncall"/>
      <ref name="geq"/>
      <ref name="gt"/>
      <ref name="implication"/>
      <ref name="isundefined"/>
      <ref name="leq"/>
      <ref name="lsh"/>
      <ref name="lt"/>
      <ref name="mod"/>
      <ref name="mul"/>
      <ref name="negative"/>
      <ref name="neq"/>
      <ref name="not"/>
      <ref name="number"/>
      <ref name="or"/>
      <ref name="rsh"/>
      <ref name="sub"/>
      <ref name="ternary"/>
      <ref name="xor"/>
    </choice>
  </define>

  <define name="exprid">
    <element name="exprid">
      <ref name="location"/>
      <attribute name="id">
        <ref name="identifier"/>
      </attribute>
      <ref name="content"/>
    </element>
  </define>

  <define name="field">
    <element name="field">
      <ref name="location"/>
      <ref name="content"/>
      <element name="lhs">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
      <element name="rhs">
        <ref name="content"/>
        <element name="string">
          <attribute name="value">
            <text/>
          </attribute>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="forall">
    <element name="forall">
      <ref name="location"/>
      <ref name="content"/>
      <element name="quan">
        <ref name="content"/>
        <ref name="quantifier"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
      <element name="expr">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="forstmt">
    <element name="forstmt">
      <ref name="location"/>
      <ref name="content"/>
      <ref name="quantifier"/>
      <ref name="content"/>
      <optional>
        <ref name="body"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="function">
    <element name="function">
      <ref name="location"/>
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <ref name="content"/>
      <optional>
        <element name="parameters">
          <ref name="content"/>
          <zeroOrMore>
            <ref name="vardecl"/>
            <ref name="content"/>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <element name="returntype">
          <ref name="content"/>
          <ref name="typeexpr"/>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="decls"/>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="body"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="functioncall">
    <element name="functioncall">
      <ref name="location"/>
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <ref name="content"/>
      <zeroOrMore>
        <element name="argument">
          <ref name="content"/>
          <ref name="expr"/>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </zeroOrMore>
    </element>
  </define>

  <define name="functions">
    <element name="functions">
      <ref name="content"/>
      <zeroOrMore>
        <ref name="function"/>
        <ref name="content"/>
      </zeroOrMore>
    </element>
  </define>

  <define name="geq">
    <element name="geq">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="gt">
    <element name="gt">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="identifier">
    <data type="string">
      <param name="pattern">[a-zA-Z_][a-zA-Z0-9_]*</param>
    </data>
  </define>

  <define name="if">
    <element name="if">
      <ref name="location"/>
      <ref name="content"/>
      <zeroOrMore>
        <choice>
          <ref name="ifclause"/>
          <ref name="content"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>

  <define name="ifclause">
    <element name="ifclause">
      <ref name="location"/>
      <ref name="content"/>
      <optional>
        <element name="condition">
          <ref name="content"/>
          <ref name="expr"/>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="body"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="implication">
    <element name="implication">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="isundefined">
    <element name="isundefined">
      <ref name="location"/>
      <ref name="uexpr"/>
    </element>
  </define>

  <define name="leq">
    <element name="leq">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="location">
    <optional>
      <attribute name="first_line">
        <data type="integer"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="first_column">
        <data type="integer"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="last_line">
        <data type="integer"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="last_column">
        <data type="integer"/>
      </attribute>
    </optional>
  </define>

  <define name="lsh">
    <element name="lsh">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="lt">
    <element name="lt">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="mod">
    <element name="mod">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="model">
    <element name="model">
      <ref name="location"/>
      <ref name="content"/>
      <optional>
        <ref name="decls"/>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="functions"/>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="rules"/>
        <ref name="content"/>
      </optional>
      <zeroOrMore>
        <choice>
          <ref name="aliasdecl"/>
          <ref name="constdecl"/>
          <ref name="typedecl"/>
          <ref name="vardecl"/>
          <ref name="function"/>
          <ref name="aliasrule"/>
          <ref name="propertyrule"/>
          <ref name="ruleset"/>
          <ref name="simplerule"/>
          <ref name="startstate"/>
          <ref name="content"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>

  <define name="mul">
    <element name="mul">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="negative">
    <element name="negative">
      <ref name="location"/>
      <ref name="uexpr"/>
    </element>
  </define>

  <define name="neq">
    <element name="neq">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="not">
    <element name="not">
      <ref name="location"/>
      <ref name="uexpr"/>
    </element>
  </define>

  <define name="number">
    <element name="number">
      <ref name="location"/>
      <attribute name="value">
        <data type="integer"/>
      </attribute>
      <ref name="content"/>
    </element>
  </define>

  <define name="or">
    <element name="or">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="procedurecall">
    <element name="procedurecall">
      <ref name="location"/>
      <ref name="content"/>
      <ref name="functioncall"/>
      <ref name="content"/>
    </element>
  </define>

  <define name="property">
    <element name="property">
      <ref name="location"/>
      <attribute name="category">
        <data type="string">
          <param name="pattern">(assertion|assumption|cover|liveness)</param>
        </data>
      </attribute>
      <ref name="content"/>
      <element name="expr">
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="propertyrule">
    <element name="propertyrule">
      <ref name="location"/>
      <optional>
        <attribute name="name">
          <text/>
        </attribute>
      </optional>
      <ref name="content"/>
      <optional>
        <element name="quantifiers">
          <zeroOrMore>
            <choice>
              <ref name="quantifier"/>
              <ref name="content"/>
            </choice>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
      <ref name="property"/>
      <ref name="content"/>
    </element>
  </define>

  <define name="propertystmt">
    <element name="propertystmt">
      <ref name="location"/>
      <optional>
        <attribute name="message">
          <text/>
        </attribute>
      </optional>
      <ref name="content"/>
      <ref name="property"/>
      <ref name="content"/>
    </element>
  </define>

  <define name="put">
    <element name="put">
      <ref name="location"/>
      <optional>
        <attribute name="value">
          <text/>
        </attribute>
      </optional>
      <ref name="content"/>
      <optional>
        <ref name="expr"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="quantifier">
    <element name="quantifier">
      <ref name="location"/>
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <ref name="content"/>
      <optional>
        <element name="type">
          <ref name="content"/>
          <ref name="typeexpr"/>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <element name="from">
          <ref name="content"/>
          <ref name="expr"/>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <element name="to">
          <ref name="content"/>
          <ref name="expr"/>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <element name="step">
          <ref name="content"/>
          <ref name="expr"/>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="range">
    <element name="range">
      <ref name="location"/>
      <ref name="content"/>
      <element name="min">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
      <element name="max">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="record">
    <element name="record">
      <ref name="location"/>
      <ref name="content"/>
      <zeroOrMore>
        <ref name="vardecl"/>
        <ref name="content"/>
      </zeroOrMore>
    </element>
  </define>

  <define name="return">
    <element name="return">
      <ref name="location"/>
      <ref name="content"/>
      <optional>
        <ref name="expr"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="rsh">
    <element name="rsh">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="rulecollection">
    <zeroOrMore>
      <choice>
        <ref name="aliasrule"/>
        <ref name="propertyrule"/>
        <ref name="ruleset"/>
        <ref name="simplerule"/>
        <ref name="startstate"/>
      </choice>
    </zeroOrMore>
  </define>

  <define name="rules">
    <element name="rules">
      <zeroOrMore>
        <choice>
          <ref name="content"/>
          <ref name="rulecollection"/>
        </choice>
      </zeroOrMore>
    </element>
  </define>

  <define name="ruleset">
    <element name="ruleset">
      <ref name="location"/>
      <optional>
        <attribute name="name">
          <text/>
        </attribute>
      </optional>
      <ref name="content"/>
      <optional>
        <element name="quantifiers">
          <zeroOrMore>
            <choice>
              <element name="quantifier">
                <ref name="location"/>
                <attribute name="name">
                  <ref name="identifier"/>
                </attribute>
                <ref name="content"/>
                <element name="type">
                  <ref name="typeexpr"/>
                </element>
              </element>
              <ref name="content"/>
            </choice>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="rules"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="scalarset">
    <element name="scalarset">
      <ref name="location"/>
      <ref name="content"/>
      <element name="bound">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="simplerule">
    <element name="simplerule">
      <ref name="location"/>
      <optional>
        <attribute name="name">
          <text/>
        </attribute>
      </optional>
      <ref name="content"/>
      <optional>
        <element name="quantifiers">
          <zeroOrMore>
            <choice>
              <element name="quantifier">
                <ref name="location"/>
                <attribute name="name">
                  <ref name="identifier"/>
                </attribute>
                <ref name="content"/>
                <element name="type">
                  <ref name="typeexpr"/>
                </element>
              </element>
              <ref name="content"/>
            </choice>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <element name="guard">
          <ref name="content"/>
          <ref name="expr"/>
          <ref name="content"/>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="decls"/>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="body"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="startstate">
    <element name="startstate">
      <ref name="location"/>
      <optional>
        <attribute name="name">
          <text/>
        </attribute>
      </optional>
      <ref name="content"/>
      <optional>
        <element name="quantifiers">
          <zeroOrMore>
            <choice>
              <element name="quantifier">
                <ref name="location"/>
                <attribute name="name">
                  <ref name="identifier"/>
                </attribute>
                <ref name="content"/>
                <element name="type">
                  <ref name="typeexpr"/>
                </element>
              </element>
              <ref name="content"/>
            </choice>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="decls"/>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="body"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="statement">
    <choice>
      <ref name="aliasstmt"/>
      <ref name="assignment"/>
      <ref name="clear"/>
      <ref name="errorstmt"/>
      <ref name="if"/>
      <ref name="forstmt"/>
      <ref name="procedurecall"/>
      <ref name="propertystmt"/>
      <ref name="put"/>
      <ref name="return"/>
      <ref name="switch"/>
      <ref name="undefine"/>
      <ref name="while"/>
    </choice>
  </define>

  <define name="sub">
    <element name="sub">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

  <define name="switch">
    <element name="switch">
      <ref name="location"/>
      <ref name="content"/>
      <element name="expr">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
      <optional>
        <element name="cases">
          <zeroOrMore>
            <choice>
              <ref name="switchcase"/>
              <ref name="content"/>
            </choice>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="switchcase">
    <element name="case">
      <ref name="content"/>
      <optional>
        <element name="matches">
          <zeroOrMore>
            <choice>
              <ref name="expr"/>
              <ref name="content"/>
            </choice>
          </zeroOrMore>
        </element>
        <ref name="content"/>
      </optional>
      <optional>
        <ref name="body"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="ternary">
    <element name="ternary">
      <ref name="location"/>
      <ref name="content"/>
      <element name="condition">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
      <element name="lhs">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
      <element name="rhs">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="typedecl">
    <element name="typedecl">
      <ref name="location"/>
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <ref name="content"/>
      <element name="value">
        <ref name="content"/>
        <ref name="typeexpr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="typeexpr">
    <choice>
      <ref name="array"/>
      <ref name="enum"/>
      <ref name="range"/>
      <ref name="record"/>
      <ref name="scalarset"/>
      <ref name="typeexprid"/>
    </choice>
  </define>

  <define name="typeexprid">
    <element name="typeexprid">
      <ref name="location"/>
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <ref name="content"/>
    </element>
  </define>

  <define name="uexpr">
    <ref name="content"/>
    <element name="rhs">
      <ref name="content"/>
      <ref name="expr"/>
      <ref name="content"/>
    </element>
    <ref name="content"/>
  </define>

  <define name="undefine">
    <element name="undefine">
      <ref name="location"/>
      <ref name="content"/>
      <ref name="expr"/>
      <ref name="content"/>
    </element>
  </define>

  <define name="unit">
    <element name="unit">
      <attribute name="filename">
        <text/>
      </attribute>
      <ref name="location"/>
      <ref name="content"/>
      <ref name="model"/>
      <ref name="content"/>
    </element>
  </define>

  <define name="vardecl">
    <element name="vardecl">
      <ref name="location"/>
      <attribute name="name">
        <ref name="identifier"/>
      </attribute>
      <attribute name="readonly">
        <data type="string">
          <param name="pattern">[01]</param>
        </data>
      </attribute>
      <ref name="content"/>
      <element name="type">
        <ref name="content"/>
        <ref name="typeexpr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
    </element>
  </define>

  <define name="while">
    <element name="while">
      <ref name="location"/>
      <ref name="content"/>
      <element name="condition">
        <ref name="content"/>
        <ref name="expr"/>
        <ref name="content"/>
      </element>
      <ref name="content"/>
      <optional>
        <ref name="body"/>
        <ref name="content"/>
      </optional>
    </element>
  </define>

  <define name="xor">
    <element name="xor">
      <ref name="location"/>
      <ref name="binexpr"/>
    </element>
  </define>

</grammar>
