# Based on https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml

name: romp tests

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      fail-fast: false

      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        compiler: [g++, clang++]
        sanitizers: [""]
        include:
          - os: ubuntu-latest
            build_type: RelWithDebInfo
            compiler: g++
            sanitizers: "address;undefined;leak"
          - os: ubuntu-latest
            build_type: RelWithDebInfo
            compiler: clang++
            sanitizers: "address;undefined;leak" # TODO: enable CFI sanitizer for clang
          - os: ubuntu-latest
            build_type: RelWithDebInfo
            compiler: clang++
            sanitizers: "safe-stack;undefined"

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install libfl-dev
        pip install lit

    - name: Install Dependencies (MacOS)
      if: runner.os == 'macOS'
      run: |
        brew install bison

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_CXX_COMPILER="${{ matrix.compiler }}"
        -DROMP_USE_SANITIZERS="${{ matrix.sanitizers }}"
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -V --build-config ${{ matrix.build_type }}
